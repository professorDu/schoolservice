<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.usts.college.dao.ApartMapper">
  <resultMap id="BaseResultMap" type="com.usts.college.bean.Apart">
    <id column="apart_id" jdbcType="INTEGER" property="apartId" />
    <result column="apart_apa" jdbcType="VARCHAR" property="apartApa" />
  </resultMap>
  <!--查询一个楼栋有多少个房间-->
  <resultMap id="WithApartsResultMap" type="com.usts.college.bean.Apart" extends="BaseResultMap">
    <collection property="apartrooms" ofType="com.usts.college.bean.Apartroom"
                resultMap="com.usts.college.dao.ApartroomMapper.BaseResultMap">
    </collection>
  </resultMap>
<!--查询一个楼栋中一个房间里多少个学生-->
  <resultMap id="WithApartsAndStudentsResultMap" type="com.usts.college.bean.Apart" extends="BaseResultMap">
    <collection property="apartrooms" ofType="com.usts.college.bean.Apartroom"
                resultMap="com.usts.college.dao.ApartroomMapper.StudentsResultMap">
    </collection>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    apart_id, apart_apa
  </sql>
  <sql id="WithAparts_Column_List">
    ap.apart_apa,ar.apartroom_abc,ar.apartroom_dorm
  </sql>
  <sql id="WithApartsAndStudents">
   s.*,ar.*,ap.*
  </sql>

  <!--List<Apart> selectByExampleWithApartsAndStudents(ApartExample example);-->
  <select id="selectByExampleWithApartsAndStudents"  resultMap="WithApartsAndStudentsResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="WithApartsAndStudents" />
    from student s
    INNER JOIN apartroom ar on s.apartroom_pid=ar.apartroom_id
    INNER JOIN apart ap on ap.apart_id=ar.apart_pid
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <!--List<Apart> selectByExampleWithAparts(ApartExample example);-->
  <select id="selectByExampleWithAparts"  resultMap="WithApartsResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="WithAparts_Column_List" />
    from apart ap
    INNER JOIN apartroom ar on ap.apart_id=ar.apart_pid
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.usts.college.bean.ApartExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from apart
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from apart
    where apart_id = #{apartId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from apart
    where apart_id = #{apartId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.usts.college.bean.ApartExample">
    delete from apart
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.usts.college.bean.Apart">
    insert into apart (apart_id, apart_apa)
    values (#{apartId,jdbcType=INTEGER}, #{apartApa,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.usts.college.bean.Apart">
    insert into apart
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="apartId != null">
        apart_id,
      </if>
      <if test="apartApa != null">
        apart_apa,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="apartId != null">
        #{apartId,jdbcType=INTEGER},
      </if>
      <if test="apartApa != null">
        #{apartApa,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.usts.college.bean.ApartExample" resultType="java.lang.Long">
    select count(*) from apart
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update apart
    <set>
      <if test="record.apartId != null">
        apart_id = #{record.apartId,jdbcType=INTEGER},
      </if>
      <if test="record.apartApa != null">
        apart_apa = #{record.apartApa,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update apart
    set apart_id = #{record.apartId,jdbcType=INTEGER},
      apart_apa = #{record.apartApa,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.usts.college.bean.Apart">
    update apart
    <set>
      <if test="apartApa != null">
        apart_apa = #{apartApa,jdbcType=VARCHAR},
      </if>
    </set>
    where apart_id = #{apartId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.usts.college.bean.Apart">
    update apart
    set apart_apa = #{apartApa,jdbcType=VARCHAR}
    where apart_id = #{apartId,jdbcType=INTEGER}
  </update>
</mapper>