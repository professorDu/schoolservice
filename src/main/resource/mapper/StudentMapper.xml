<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.usts.college.dao.StudentMapper">
  <resultMap id="BaseResultMap" type="com.usts.college.bean.Student">
    <id column="stu_id" jdbcType="INTEGER" property="stuId" />
    <result column="stu_num" jdbcType="VARCHAR" property="stuNum" />
    <result column="stu_pass" jdbcType="VARCHAR" property="stuPass" />
    <result column="stu_name" jdbcType="VARCHAR" property="stuName" />
    <result column="stu_gender" jdbcType="CHAR" property="stuGender" />
    <result column="stu_college" jdbcType="VARCHAR" property="stuCollege" />
    <result column="apartroom_pid" jdbcType="INTEGER" property="apartroomPid" />
  </resultMap>
  <!--List<Student> selectByExampleWithRoomAndApart(StudentExample example);-->
  <!--Student selectByPrimaryKeyWithRoomAndApart(Integer stuId);-->
  <resultMap id="WithRoomAndApartResultMap" type="com.usts.college.bean.Student" extends="BaseResultMap">
    <association property="apartroom" javaType="com.usts.college.bean.Apartroom" resultMap="com.usts.college.dao.ApartroomMapper.DemoResultMap">
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    stu_id, stu_num, stu_pass, stu_name, stu_gender, stu_college, apartroom_pid
  </sql>
  <sql id="WithRoomAndApart_Column_List">
    s.stu_num,s.stu_pass,s.stu_name,s.stu_gender,s.stu_college,ap.apart_apa,ar.apartroom_abc,ar.apartroom_dorm
  </sql>
  <select id="selectByExampleWithRoomAndApart"  resultMap="WithRoomAndApartResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="WithRoomAndApart_Column_List" />
    from student s
    INNER JOIN apartroom ar on s.apartroom_pid=ar.apartroom_id
    INNER JOIN apart ap on ap.apart_id=ar.apart_pid
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKeyWithRoomAndApart" resultMap="WithRoomAndApartResultMap">
    select
    <include refid="WithRoomAndApart_Column_List" />
    from student s
    INNER JOIN apartroom ar on s.apartroom_pid=ar.apartroom_id
    INNER JOIN apart ap on ap.apart_id=ar.apart_pid
    where stu_id = #{stuId,jdbcType=INTEGER}
  </select>
  <select id="selectByExample" parameterType="com.usts.college.bean.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where stu_id = #{stuId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student
    where stu_id = #{stuId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.usts.college.bean.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.usts.college.bean.Student">
    insert into student (stu_id, stu_num, stu_pass, 
      stu_name, stu_gender, stu_college, 
      apartroom_pid)
    values (#{stuId,jdbcType=INTEGER}, #{stuNum,jdbcType=VARCHAR}, #{stuPass,jdbcType=VARCHAR}, 
      #{stuName,jdbcType=VARCHAR}, #{stuGender,jdbcType=CHAR}, #{stuCollege,jdbcType=VARCHAR}, 
      #{apartroomPid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.usts.college.bean.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stuId != null">
        stu_id,
      </if>
      <if test="stuNum != null">
        stu_num,
      </if>
      <if test="stuPass != null">
        stu_pass,
      </if>
      <if test="stuName != null">
        stu_name,
      </if>
      <if test="stuGender != null">
        stu_gender,
      </if>
      <if test="stuCollege != null">
        stu_college,
      </if>
      <if test="apartroomPid != null">
        apartroom_pid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stuId != null">
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="stuNum != null">
        #{stuNum,jdbcType=VARCHAR},
      </if>
      <if test="stuPass != null">
        #{stuPass,jdbcType=VARCHAR},
      </if>
      <if test="stuName != null">
        #{stuName,jdbcType=VARCHAR},
      </if>
      <if test="stuGender != null">
        #{stuGender,jdbcType=CHAR},
      </if>
      <if test="stuCollege != null">
        #{stuCollege,jdbcType=VARCHAR},
      </if>
      <if test="apartroomPid != null">
        #{apartroomPid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.usts.college.bean.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.stuId != null">
        stu_id = #{record.stuId,jdbcType=INTEGER},
      </if>
      <if test="record.stuNum != null">
        stu_num = #{record.stuNum,jdbcType=VARCHAR},
      </if>
      <if test="record.stuPass != null">
        stu_pass = #{record.stuPass,jdbcType=VARCHAR},
      </if>
      <if test="record.stuName != null">
        stu_name = #{record.stuName,jdbcType=VARCHAR},
      </if>
      <if test="record.stuGender != null">
        stu_gender = #{record.stuGender,jdbcType=CHAR},
      </if>
      <if test="record.stuCollege != null">
        stu_college = #{record.stuCollege,jdbcType=VARCHAR},
      </if>
      <if test="record.apartroomPid != null">
        apartroom_pid = #{record.apartroomPid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set stu_id = #{record.stuId,jdbcType=INTEGER},
      stu_num = #{record.stuNum,jdbcType=VARCHAR},
      stu_pass = #{record.stuPass,jdbcType=VARCHAR},
      stu_name = #{record.stuName,jdbcType=VARCHAR},
      stu_gender = #{record.stuGender,jdbcType=CHAR},
      stu_college = #{record.stuCollege,jdbcType=VARCHAR},
      apartroom_pid = #{record.apartroomPid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.usts.college.bean.Student">
    update student
    <set>
      <if test="stuNum != null">
        stu_num = #{stuNum,jdbcType=VARCHAR},
      </if>
      <if test="stuPass != null">
        stu_pass = #{stuPass,jdbcType=VARCHAR},
      </if>
      <if test="stuName != null">
        stu_name = #{stuName,jdbcType=VARCHAR},
      </if>
      <if test="stuGender != null">
        stu_gender = #{stuGender,jdbcType=CHAR},
      </if>
      <if test="stuCollege != null">
        stu_college = #{stuCollege,jdbcType=VARCHAR},
      </if>
      <if test="apartroomPid != null">
        apartroom_pid = #{apartroomPid,jdbcType=INTEGER},
      </if>
    </set>
    where stu_id = #{stuId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.usts.college.bean.Student">
    update student
    set stu_num = #{stuNum,jdbcType=VARCHAR},
      stu_pass = #{stuPass,jdbcType=VARCHAR},
      stu_name = #{stuName,jdbcType=VARCHAR},
      stu_gender = #{stuGender,jdbcType=CHAR},
      stu_college = #{stuCollege,jdbcType=VARCHAR},
      apartroom_pid = #{apartroomPid,jdbcType=INTEGER}
    where stu_id = #{stuId,jdbcType=INTEGER}
  </update>
</mapper>